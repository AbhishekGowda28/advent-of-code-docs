"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6436],{888:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"adding-new-packages","metadata":{"permalink":"/advent-of-code-docs/blog/adding-new-packages","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-02-13-adding-new-packages.mdx","source":"@site/blog/2024-02-13-adding-new-packages.mdx","title":"Adding new packages to nx","description":"How to add new package to nx package based repo","date":"2024-02-13T00:00:00.000Z","formattedDate":"February 13, 2024","tags":[{"label":"nx","permalink":"/advent-of-code-docs/blog/tags/nx"},{"label":"package-based","permalink":"/advent-of-code-docs/blog/tags/package-based"}],"readingTime":0.52,"hasTruncateMarker":false,"authors":[{"name":"Abhishek Gowda","title":"Owner of this source","url":"https://github.com/abhishekgowda28","imageURL":"https://gitlab.com/uploads/-/system/user/avatar/8594191/avatar.png","key":"abhi"}],"frontMatter":{"slug":"adding-new-packages","title":"Adding new packages to nx","description":"How to add new package to nx package based repo","authors":["abhi"],"tags":["nx","package-based"]},"unlisted":false,"nextItem":{"title":"Repository setup","permalink":"/advent-of-code-docs/blog/repo-setup"}},"content":"## Background\\r\\n\\r\\nI wanted a different packages to work on different things. I don\'t want to have a single package that would contain everything. I wanted flexibility on creating and testing code. So went to nx package based approach.\\r\\n\\r\\n## Prerequsite \\r\\n\\r\\nI used nx VS code extension to create/generate the package. This made it easier to create the package.\\r\\n\\r\\n## Setup\\r\\n\\r\\nWe just need to follow along the setup steps and the package would be created at the end of the steps.\\r\\n\\r\\nnx follows it\'s own project configuration - https://nx.dev/reference/project-configuration\\r\\n\\r\\nFor more information the above \ud83d\udc46 link can be followed.\\r\\n\\r\\n## References\\r\\n\\r\\n- https://nx.dev/reference/project-configuration"},{"id":"repo-setup","metadata":{"permalink":"/advent-of-code-docs/blog/repo-setup","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-12-07-repo-setup.mdx","source":"@site/blog/2023-12-07-repo-setup.mdx","title":"Repository setup","description":"Setting up documentation repository with nx and docusaurus","date":"2023-12-07T00:00:00.000Z","formattedDate":"December 7, 2023","tags":[{"label":"docusaurus","permalink":"/advent-of-code-docs/blog/tags/docusaurus"},{"label":"repo","permalink":"/advent-of-code-docs/blog/tags/repo"},{"label":"repository","permalink":"/advent-of-code-docs/blog/tags/repository"},{"label":"github","permalink":"/advent-of-code-docs/blog/tags/github"},{"label":"docs","permalink":"/advent-of-code-docs/blog/tags/docs"},{"label":"gitlab","permalink":"/advent-of-code-docs/blog/tags/gitlab"},{"label":"git","permalink":"/advent-of-code-docs/blog/tags/git"},{"label":"submodules","permalink":"/advent-of-code-docs/blog/tags/submodules"}],"readingTime":2.925,"hasTruncateMarker":false,"authors":[{"name":"Abhishek Gowda","title":"Owner of this source","url":"https://github.com/abhishekgowda28","imageURL":"https://gitlab.com/uploads/-/system/user/avatar/8594191/avatar.png","key":"abhi"}],"frontMatter":{"slug":"repo-setup","title":"Repository setup","description":"Setting up documentation repository with nx and docusaurus","authors":["abhi"],"tags":["docusaurus","repo","repository","github","docs","gitlab","git","submodules"]},"unlisted":false,"prevItem":{"title":"Adding new packages to nx","permalink":"/advent-of-code-docs/blog/adding-new-packages"}},"content":"## Background\\r\\n\\r\\nThis is a documentation repository for my advent of code solution.\\r\\n\\r\\nMotive behind this website, I tend to forget things which I\'ve done. And when\\r\\nthe similar problem arise that needs to be solved, I try to look into git\\r\\nhistory to find how I solved it. But never I\'ve gotten a thing out of git\\r\\nhistory. (Which is completly my mistake)\\r\\n\\r\\n\\r\\nI\'ve 2 repositories, one for the actual code and the other for hosting the documentation.\\r\\nThe actual code is hosted in a private repo and this repo is a public compiled docusaurus site.\\r\\nI\'ll elobrate how I\'ve set this up.\\r\\n\\r\\n## Setup\\r\\n\\r\\n### Initilizing project\\r\\n\\r\\n1. With repo with nx \\r\\n\\r\\n```bash\\r\\nnpx create-nx-workspace@latest <project_name> --preset=ts\\r\\n```\\r\\n\\r\\n2. Update `package.json` to use pnpm\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"name\\": \\"<project_name>\\",\\r\\n    \\"engine\\": {\\r\\n        \\"node\\": \\"^20\\",\\r\\n        \\"pnpm\\": \\">=8\\"\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n3. Change `package-lock.json` file into `pnpm-lock.yaml` file\\r\\n```bash\\r\\npnpm import\\r\\n```\\r\\n\\r\\n### Adding git submodule\\r\\n\\r\\n1. Move into the project \\r\\n2. Add submodule to the project, in this case we had already created a different empty repository for this.\\r\\n\\r\\n```git\\r\\ngit submodule add <repository_url>\\r\\n```\\r\\n\\r\\nWith this there should be a new file called `.gitmodules` should be created. With the information about the module added.\\r\\n\\r\\nAt this point we can commit the progress.\\r\\n\\r\\n### Creating packages within the mono repo\\r\\n\\r\\nThe root repo we have is a mono repo. Now we have to create a new file with name `pnpm-workspace.yaml`. \\r\\nInside it added the folder structure. This is what I\'ve\\r\\n```yaml\\r\\npackages:\\r\\n  - \'src/*\'\\r\\n  - \'documentation/*\'\\r\\n```\\r\\n\\r\\n### Creating docusaurus folder\\r\\n\\r\\nThere is a generator for creating of docusaurus in nx. But I prefer using the create command from docusaurus.\\r\\n\\r\\n```bash\\r\\nnpx create-docusaurus@latest documentation classic --typescript\\r\\n```\\r\\n\\r\\nWith this the setup for the repository is completed.\\r\\n\\r\\n## Update docusaurus config\\r\\n\\r\\nThere are couple of configuration changes that needs to be done in `docusaurus.config` file.\\r\\n\\r\\n\\r\\nWith this the setting up of documentation repo will be completed. But we still need to host this in github pages.\\r\\n\\r\\n## Hosting in github pages\\r\\n\\r\\nThe submodule repo we added is a public github pages repo\\r\\n\\r\\n### Enabling github pages\\r\\n\\r\\n1. Create a public repo.\\r\\n2. Go to repo setting.\\r\\n3. In the left section, there we will find **Pages** section.\\r\\n4. Scroll to **Build and deployment** section \\r\\n5. Select from **Deploy from a branch**\\r\\n6. Select Branch - **main** and folder - **root**\\r\\n7. Click on save.\\r\\n\\r\\nIt would take few seconds and the github page should be up.\\r\\n\\r\\nThere should be **Visit site** button. Click on it, will take to the deployed page.\\r\\nCopy the url of the page.\\r\\n\\r\\nGo back to the Landing page of the repo.\\r\\n\\r\\nIn the right hand side there we will find a gear icon \u2699, click on it.\\r\\nAnd enable **Use your Github pages website** check box.\\r\\n\\r\\n## Conclusion\\r\\n\\r\\nWith this we should have things read for deployment.\\r\\n\\r\\nLet tweak some script in the documentation **package.json**\\r\\ncopy `build` script command and paste it and rename it to `build-github-pages`\\r\\n\\r\\nUpdate the command as\\r\\n\\r\\n```js\\r\\n\\"build-github-page\\": \\"docusaurus build && cp -rf build/* <sub_module_location>\\", // update submodule location here\\r\\n```\\r\\n\\r\\nNow run the command `pnpm build-github-page`.\\r\\n\\r\\nWith this the submodule will be update.\\r\\n\\r\\nAdd the update files in the root repository and commit with appropriate message.\\r\\n\\r\\n- Traverse to the submodule directory.\\r\\n- Add all the files to git and push the changes.\\r\\n- After few seconds the github page will be updated with the changes.\\r\\n\\r\\n**\ud83c\udf89 We have successfully deployed docusaurus as github pages \ud83d\ude80**"}]}')}}]);