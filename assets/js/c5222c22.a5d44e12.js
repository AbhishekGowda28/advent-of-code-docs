"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6436],{888:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"setting-up-new-dev-env","metadata":{"permalink":"/advent-of-code-docs/blog/setting-up-new-dev-env","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-08-25-setting-up-new-dev-env.mdx","source":"@site/blog/2024-08-25-setting-up-new-dev-env.mdx","title":"A new setup","description":"This is notes for my personal use","date":"2024-08-25T00:00:00.000Z","formattedDate":"August 25, 2024","tags":[{"label":"nx","permalink":"/advent-of-code-docs/blog/tags/nx"},{"label":"package-based","permalink":"/advent-of-code-docs/blog/tags/package-based"},{"label":"ssh","permalink":"/advent-of-code-docs/blog/tags/ssh"},{"label":"gitlab","permalink":"/advent-of-code-docs/blog/tags/gitlab"},{"label":"github","permalink":"/advent-of-code-docs/blog/tags/github"}],"readingTime":1.44,"hasTruncateMarker":false,"authors":[{"name":"Abhishek Gowda","title":"Owner of this source","url":"https://github.com/abhishekgowda28","imageURL":"https://gitlab.com/uploads/-/system/user/avatar/8594191/avatar.png","key":"abhi"}],"frontMatter":{"slug":"setting-up-new-dev-env","title":"A new setup","description":"This is notes for my personal use","authors":["abhi"],"tags":["nx","package-based","ssh","gitlab","github"]},"unlisted":false,"nextItem":{"title":"Adding new packages to nx","permalink":"/advent-of-code-docs/blog/adding-new-packages"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n:::warning\\nI am assuming this is a new machine setup or a machine which is occasionally used and does not contain any previous setup.\\nAnd for most part I will be talking about **Linux** machine\\n:::\\n\\n## Setting up SSH key\\n\\n### Adding SSH key in gitlab\\n1. Sign in to gitlab\\n2. Click on your user profile. \\nYou should see a dropdown modal\\n3. Click preference on it. You will be taken to the [preference page](https://gitlab.com/-/profile/preferences) of your profile\\n4. Look for SSH keys on the left navigation.\\nIf left navigation is closed click on \\"Sidebar Navigation\\" button or press `Ctrl+\\\\`. Navigation sidebar will open.\\n5. You should now be in [SSH keys page](https://gitlab.com/-/user_settings/ssh_keys)\\n6. Locate **Add new key** button\\n7. Click on it \u261d\ufe0f (Add new key)\\n8. In your machine\\n<Tabs>\\n  <TabItem value=\\"linux\\" label=\\"Linux\\" default>\\n    Navigate to user directory\\n    ```bash\\n    cd ~\\n    ```\\n    Locate `.ssh` directory, it is an hidden directory, navigate within it\\n    ```bash\\n    cd ~/.ssh\\n    ```\\n    Copy public key that is generated\\n    ```bash\\n    cat <encrypted_file_name>.pub\\n    ```\\n    copy the contents\\n  </TabItem>\\n  <TabItem value=\\"win\\" label=\\"Windows\\">\\n    Open Run, ``\\n    ```bash\\n    %userprofile%\\n    ```\\n    - Locate `.ssh` directory, navigate within it\\n    - Copy public key that is generated, by opening the file in notepad\\n    - Copy the contents\\n  </TabItem>\\n</Tabs>\\n9. Past the copied key into key text area\\n10. Pick a title so you could differentiate when and where the token is located\\n11. Choose `Usage type`. I prefer to use the same token for Authenticating and signing, you could have different token setup\\n12. Choose the duration of the key when it should be invalidated. \\n---\\n- My suggestion/steps would get outdated, leaving gitlab ssh key [reference link](https://docs.gitlab.com/ee/user/ssh.html)"},{"id":"adding-new-packages","metadata":{"permalink":"/advent-of-code-docs/blog/adding-new-packages","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2024-02-13-adding-new-packages.mdx","source":"@site/blog/2024-02-13-adding-new-packages.mdx","title":"Adding new packages to nx","description":"How to add new package to nx package based repo","date":"2024-02-13T00:00:00.000Z","formattedDate":"February 13, 2024","tags":[{"label":"nx","permalink":"/advent-of-code-docs/blog/tags/nx"},{"label":"package-based","permalink":"/advent-of-code-docs/blog/tags/package-based"}],"readingTime":0.52,"hasTruncateMarker":false,"authors":[{"name":"Abhishek Gowda","title":"Owner of this source","url":"https://github.com/abhishekgowda28","imageURL":"https://gitlab.com/uploads/-/system/user/avatar/8594191/avatar.png","key":"abhi"}],"frontMatter":{"slug":"adding-new-packages","title":"Adding new packages to nx","description":"How to add new package to nx package based repo","authors":["abhi"],"tags":["nx","package-based"]},"unlisted":false,"prevItem":{"title":"A new setup","permalink":"/advent-of-code-docs/blog/setting-up-new-dev-env"},"nextItem":{"title":"Repository setup","permalink":"/advent-of-code-docs/blog/repo-setup"}},"content":"## Background\\n\\nI wanted a different packages to work on different things. I don\'t want to have a single package that would contain everything. I wanted flexibility on creating and testing code. So went to nx package based approach.\\n\\n## Prerequsite \\n\\nI used nx VS code extension to create/generate the package. This made it easier to create the package.\\n\\n## Setup\\n\\nWe just need to follow along the setup steps and the package would be created at the end of the steps.\\n\\nnx follows it\'s own project configuration - https://nx.dev/reference/project-configuration\\n\\nFor more information the above \ud83d\udc46 link can be followed.\\n\\n## References\\n\\n- https://nx.dev/reference/project-configuration"},{"id":"repo-setup","metadata":{"permalink":"/advent-of-code-docs/blog/repo-setup","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-12-07-repo-setup.mdx","source":"@site/blog/2023-12-07-repo-setup.mdx","title":"Repository setup","description":"Setting up documentation repository with nx and docusaurus","date":"2023-12-07T00:00:00.000Z","formattedDate":"December 7, 2023","tags":[{"label":"docusaurus","permalink":"/advent-of-code-docs/blog/tags/docusaurus"},{"label":"repo","permalink":"/advent-of-code-docs/blog/tags/repo"},{"label":"repository","permalink":"/advent-of-code-docs/blog/tags/repository"},{"label":"github","permalink":"/advent-of-code-docs/blog/tags/github"},{"label":"docs","permalink":"/advent-of-code-docs/blog/tags/docs"},{"label":"gitlab","permalink":"/advent-of-code-docs/blog/tags/gitlab"},{"label":"git","permalink":"/advent-of-code-docs/blog/tags/git"},{"label":"submodules","permalink":"/advent-of-code-docs/blog/tags/submodules"}],"readingTime":2.925,"hasTruncateMarker":false,"authors":[{"name":"Abhishek Gowda","title":"Owner of this source","url":"https://github.com/abhishekgowda28","imageURL":"https://gitlab.com/uploads/-/system/user/avatar/8594191/avatar.png","key":"abhi"}],"frontMatter":{"slug":"repo-setup","title":"Repository setup","description":"Setting up documentation repository with nx and docusaurus","authors":["abhi"],"tags":["docusaurus","repo","repository","github","docs","gitlab","git","submodules"]},"unlisted":false,"prevItem":{"title":"Adding new packages to nx","permalink":"/advent-of-code-docs/blog/adding-new-packages"}},"content":"## Background\\n\\nThis is a documentation repository for my advent of code solution.\\n\\nMotive behind this website, I tend to forget things which I\'ve done. And when\\nthe similar problem arise that needs to be solved, I try to look into git\\nhistory to find how I solved it. But never I\'ve gotten a thing out of git\\nhistory. (Which is completly my mistake)\\n\\n\\nI\'ve 2 repositories, one for the actual code and the other for hosting the documentation.\\nThe actual code is hosted in a private repo and this repo is a public compiled docusaurus site.\\nI\'ll elobrate how I\'ve set this up.\\n\\n## Setup\\n\\n### Initilizing project\\n\\n1. With repo with nx \\n\\n```bash\\nnpx create-nx-workspace@latest <project_name> --preset=ts\\n```\\n\\n2. Update `package.json` to use pnpm\\n\\n```json\\n{\\n    \\"name\\": \\"<project_name>\\",\\n    \\"engine\\": {\\n        \\"node\\": \\"^20\\",\\n        \\"pnpm\\": \\">=8\\"\\n    }\\n}\\n```\\n\\n3. Change `package-lock.json` file into `pnpm-lock.yaml` file\\n```bash\\npnpm import\\n```\\n\\n### Adding git submodule\\n\\n1. Move into the project \\n2. Add submodule to the project, in this case we had already created a different empty repository for this.\\n\\n```git\\ngit submodule add <repository_url>\\n```\\n\\nWith this there should be a new file called `.gitmodules` should be created. With the information about the module added.\\n\\nAt this point we can commit the progress.\\n\\n### Creating packages within the mono repo\\n\\nThe root repo we have is a mono repo. Now we have to create a new file with name `pnpm-workspace.yaml`. \\nInside it added the folder structure. This is what I\'ve\\n```yaml\\npackages:\\n  - \'src/*\'\\n  - \'documentation/*\'\\n```\\n\\n### Creating docusaurus folder\\n\\nThere is a generator for creating of docusaurus in nx. But I prefer using the create command from docusaurus.\\n\\n```bash\\nnpx create-docusaurus@latest documentation classic --typescript\\n```\\n\\nWith this the setup for the repository is completed.\\n\\n## Update docusaurus config\\n\\nThere are couple of configuration changes that needs to be done in `docusaurus.config` file.\\n\\n\\nWith this the setting up of documentation repo will be completed. But we still need to host this in github pages.\\n\\n## Hosting in github pages\\n\\nThe submodule repo we added is a public github pages repo\\n\\n### Enabling github pages\\n\\n1. Create a public repo.\\n2. Go to repo setting.\\n3. In the left section, there we will find **Pages** section.\\n4. Scroll to **Build and deployment** section \\n5. Select from **Deploy from a branch**\\n6. Select Branch - **main** and folder - **root**\\n7. Click on save.\\n\\nIt would take few seconds and the github page should be up.\\n\\nThere should be **Visit site** button. Click on it, will take to the deployed page.\\nCopy the url of the page.\\n\\nGo back to the Landing page of the repo.\\n\\nIn the right hand side there we will find a gear icon \u2699, click on it.\\nAnd enable **Use your Github pages website** check box.\\n\\n## Conclusion\\n\\nWith this we should have things read for deployment.\\n\\nLet tweak some script in the documentation **package.json**\\ncopy `build` script command and paste it and rename it to `build-github-pages`\\n\\nUpdate the command as\\n\\n```js\\n\\"build-github-page\\": \\"docusaurus build && cp -rf build/* <sub_module_location>\\", // update submodule location here\\n```\\n\\nNow run the command `pnpm build-github-page`.\\n\\nWith this the submodule will be update.\\n\\nAdd the update files in the root repository and commit with appropriate message.\\n\\n- Traverse to the submodule directory.\\n- Add all the files to git and push the changes.\\n- After few seconds the github page will be updated with the changes.\\n\\n**\ud83c\udf89 We have successfully deployed docusaurus as github pages \ud83d\ude80**"}]}')}}]);